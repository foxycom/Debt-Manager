buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "me.tatarka:gradle-retrolambda:$rootProject.retrolambdaPluginVersion"
    }
}
apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}


// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/allCarvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

    defaultConfig {
        applicationId "com.chikeandroid.debtmanager"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "0.2"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // Fetch fabric api key from relevant properties file and place it in android manifest.

    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            debuggable true
            testCoverageEnabled jacocoEnabled.toBoolean()
            applicationIdSuffix '.develop'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            useProguard true
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    def Properties props = new Properties()
    def propFile = rootProject.file("keystore.properties")
    if (propFile.canRead()){
        props.load(new FileInputStream(propFile))

        if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    }else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }

    lintOptions {
        abortOnError false
        quiet true
        lintConfig file('./code_quality_tools/lint.xml')
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests.all {

            jvmArgs "-Xmx2g"

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if (carvedTests) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                }

                filter {
                    //specific test method
                    if (project.hasProperty('carvedTestsFilter')){
                        includeTestsMatching project.carvedTestsFilter
                    }
                }
            }
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:26.1.0"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"

    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation'org.mockito:mockito-core:2.6.3'

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"

    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"

    // Dagger dependencies
    compile "com.google.dagger:dagger:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    // Stetho
    debugImplementation("com.facebook.stetho:stetho:$rootProject.ext.stethoVersion") {
        exclude module: 'jsr305'
    }

    // Force usage of dependencies in the test app, since it is internally used by the runner module.
    androidTestImplementation 'com.android.support:support-annotations:' + rootProject.supportLibraryVersion
    androidTestImplementation 'com.android.support:recyclerview-v7:' + rootProject.supportLibraryVersion
    implementation "de.hdodenhof:circleimageview:$rootProject.circleImageVersion"
    /*
            Resolves dependency versions across test and production APKs, specifically, transitive
            dependencies. This is required since Espresso internally has a dependency on support-annotations.
            */
    configurations.all {
        resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    }
    /*
            All direct/transitive dependencies shared between your test and production APKs need to be
            excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
            excluding these dependencies from your test configuration will result in an dex pre-verifier error
            at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
            */
    configurations.implementation.dependencies.each { compileDependency ->
        println "Excluding compile dependency: ${compileDependency.getName()}"
        configurations.androidTestImplementation.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestImplementation.exclude module: "${compileDependency.getName()}"
        }
    }
    implementation "org.greenrobot:eventbus:$rootProject.eventbusVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.balysv:material-ripple:$rootProject.materialRippleVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
}
